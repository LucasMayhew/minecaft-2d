namespace SpriteKind {
    export const pet = SpriteKind.create()
    export const sords = SpriteKind.create()
    export const ero = SpriteKind.create()
    export const nothing = SpriteKind.create()
    export const ero2 = SpriteKind.create()
}
controller.up.onEvent(ControllerButtonEvent.Pressed, function () {
    if (mi) {
        X_Y = CollisionDirection.Top
        if (mySprite.isHittingTile(CollisionDirection.Bottom)) {
            mySprite.vy = -150
        }
    }
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile38, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.darkGroundCenter)
    list.push(img`
        . . . . . e e . e 4 . . . . . . 
        . . . . . 4 e e e e . . . . . . 
        . . . . . e f e f e . . . . . . 
        . . . . . e f e f e . . . . . . 
        . . . . . 4 e e e 4 . . . . . . 
        . . . . . . e e e . . . . . . . 
        . . . e 4 e e e 4 e 4 e . . . . 
        . . . e e e 1 1 1 e e e . . . . 
        . . . 4 e e 1 1 1 e e 4 . . . . 
        . . . e e e 1 1 1 e 4 e . . . . 
        . . . e 4 e 1 1 1 e e e . . . . 
        . . . e e e e e e e e e . . . . 
        . . . . . 4 e . e 4 . . . . . . 
        . . . . . e e . e e . . . . . . 
        . . . . . 4 e . e 4 . . . . . . 
        . . . . . e 4 . e e . . . . . . 
        `)
    controller.moveSprite(mySprite, 200, 0)
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile28, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.floorDarkDiamond)
    list.push(img`
        . . . . . 3 3 3 3 3 . . . . . . 
        . . . . . 3 f 3 f 3 5 . . . . . 
        . . . . . 3 f 3 f 3 5 5 . . . . 
        . . . . . 3 3 3 3 3 5 . . . . . 
        . . . . . 3 3 3 3 3 . . . . . . 
        . . . . 3 3 3 3 3 3 3 . . . . . 
        . . . . 3 1 1 1 1 1 3 . . . . . 
        . . . . 3 1 f 1 f 1 3 . . . . . 
        . . . . 3 1 f 1 f 1 3 . . . . . 
        . . . 3 3 1 f 1 f 1 3 3 . . . . 
        . . 3 . 3 1 1 1 1 1 3 . 3 . . . 
        . . 3 . 3 3 3 3 3 3 3 . 3 . . . 
        . . 3 . 3 3 3 3 3 3 3 . 3 . . . 
        . . 3 . 3 3 3 3 3 3 3 . 3 . . . 
        . . 3 . 3 3 3 3 3 3 3 . 3 . . . 
        . . . . . 3 3 . 3 3 . . . . . . 
        `)
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile29, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.floorDarkDiamond)
    list.push(img`
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . 6 6 6 6 6 6 6 . . . . . 
        . . . . 6 1 1 1 1 1 6 . . . . . 
        . . . . 6 1 f 1 f 1 6 . . . . . 
        . . . . 6 1 f 1 f 1 6 . . . . . 
        . . . 6 6 1 f 1 f 1 6 6 . . . . 
        . . 6 . 6 1 1 1 1 1 6 . 6 . . . 
        . . 6 . 6 6 6 6 6 6 6 . 6 . . . 
        . . 6 . 6 6 6 6 6 6 6 . 6 . . . 
        . . 6 . 6 6 6 6 6 6 6 . 6 . . . 
        . . 6 . 6 6 6 6 6 6 6 . 6 . . . 
        . . . . . 6 6 . 6 6 . . . . . . 
        `)
})
controller.A.onEvent(ControllerButtonEvent.Pressed, function () {
    if (!(mi)) {
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile20)) {
            if (skin == list.length) {
                skin = 0
            } else {
                skin += 1
            }
            mySprite.setImage(list[skin])
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile17)) {
            item1 = myTiles.tile17
            doSomething()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile16)) {
            item1 = myTiles.tile16
            doSomething()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile14)) {
            item1 = myTiles.tile14
            doSomething()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile35)) {
            item1 = myTiles.tile35
            doSomething()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile36)) {
            item1 = myTiles.tile36
            doSomething()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile37)) {
            item1 = myTiles.tile37
            doSomething()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile18)) {
            item = myTiles.tile18
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile19)) {
            item = myTiles.tile19
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile12)) {
            item = myTiles.tile12
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile13)) {
            item = myTiles.tile13
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile26)) {
            item = myTiles.tile26
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile27)) {
            item = myTiles.tile27
            doSomething2()
        }
        if (minuyw.tileKindAt(TileDirection.Center, sprites.dungeon.floorDark2)) {
            item = sprites.dungeon.floorDark2
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, sprites.dungeon.floorLight2)) {
            item = sprites.dungeon.floorLight2
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, sprites.builtin.brick)) {
            item = sprites.builtin.brick
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile24)) {
            item = myTiles.tile24
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile25)) {
            item = myTiles.tile25
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile30)) {
            item = myTiles.tile30
            doSomething2()
        } else if (minuyw.tileKindAt(TileDirection.Center, myTiles.tile31)) {
            item = myTiles.tile31
            doSomething2()
        }
    }
})
controller.left.onEvent(ControllerButtonEvent.Pressed, function () {
    X_Y = CollisionDirection.Left
    x = -1
})
statusbars.onZero(StatusBarKind.EnemyHealth, function (status) {
    status.spriteAttachedTo().destroy()
    info.changeLifeBy(1)
})
scene.onOverlapTile(SpriteKind.Player, sprites.dungeon.collectibleBlueCrystal, function (sprite, location) {
    tiles.placeOnTile(sprite, location)
    tiles.setTileAt(location, sprites.dungeon.darkGroundCenter)
    moser = 1
})
controller.right.onEvent(ControllerButtonEvent.Pressed, function () {
    X_Y = CollisionDirection.Right
    x = 1
})
sprites.onOverlap(SpriteKind.Player, SpriteKind.Projectile, function (sprite, otherSprite) {
    info.changeLifeBy(-1)
    otherSprite.destroy()
})
sprites.onOverlap(SpriteKind.sords, SpriteKind.Enemy, function (sprite, otherSprite) {
    otherSprite.setVelocity(0, 0)
    sprites.setDataBoolean(otherSprite, "go to player", false)
    sprites.setDataBoolean(otherSprite, "go not to player", false)
    for (let index = 0; index < 6; index++) {
        statusbars.getStatusBarAttachedTo(StatusBarKind.EnemyHealth, otherSprite).value += -1
    }
    pause(100)
    sprites.setDataBoolean(otherSprite, "go to player", true)
})
function doSomething () {
    tiles.setTileAt(location, myTiles.tile10)
    tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom), img`
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 5 5 5 1 1 1 1 1 1 1 
        1 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        `)
    location = tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom)
}
scene.onOverlapTile(SpriteKind.Player, myTiles.tile34, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.darkGroundCenter)
    list.push(img`
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . 1 1 1 1 1 . . . . . . 
        . . . . . 1 f 1 f 1 . . . . . . 
        . . . . . 1 f 1 f 1 . . . . . . 
        . . . . 1 1 1 1 1 1 1 . . . . . 
        . . . . . 1 1 1 1 1 . . . . . . 
        . . . . . . 1 . 1 . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        `)
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile21, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.darkGroundSouth)
    list.push(img`
        . . . . . a . . . a . . . . . . 
        . . . . . a a a a a . . . . . . 
        . . . . . a f a f a . . . . . . 
        . . . . . a f a f a . . . . . . 
        . . . . . a a a a a . . . . . . 
        . . . . . . a a a . . . . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . a a 9 9 9 9 9 a a . . . . 
        . . . . 9 9 9 9 9 9 9 . . . . . 
        . . . . 9 9 9 9 9 9 9 . . . . . 
        . . . . . a a . a a . . . . . . 
        . . . . . a a . a a . . . . . . 
        `)
})
controller.down.onEvent(ControllerButtonEvent.Pressed, function () {
    X_Y = CollisionDirection.Bottom
})
controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {
    if (mi) {
        mi = false
        controller.moveSprite(mySprite, 0, 0)
        controller.moveSprite(minuyw, 100, 100)
        scene.cameraFollowSprite(minuyw)
    } else {
        mi = true
        controller.moveSprite(mySprite, 100, 0)
        controller.moveSprite(minuyw, 0, 0)
        scene.cameraFollowSprite(mySprite)
    }
})
info.onLifeZero(function () {
    game.over(false)
})
scene.onHitWall(SpriteKind.ero, function (sprite, location) {
    if (sprites.readDataBoolean(sprite, "boom")) {
        sprite.startEffect(effects.halo, 1000)
        sprite.lifespan = 1000
        sprite.setKind(SpriteKind.ero2)
    } else {
        sprite.setKind(SpriteKind.nothing)
        sprite.lifespan = 500
    }
})
function doSomething2 () {
    tiles.setTileAt(lokashon2, myTiles.tile10)
    tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom), img`
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 5 5 5 1 1 1 1 1 1 1 
        1 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
        `)
    lokashon2 = tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom)
}
sprites.onOverlap(SpriteKind.ero, SpriteKind.Enemy, function (sprite, otherSprite) {
    statusbars.getStatusBarAttachedTo(StatusBarKind.EnemyHealth, otherSprite).value += -1
    if (sprites.readDataBoolean(otherSprite, "go to player")) {
        sprites.setDataBoolean(otherSprite, "go to player", false)
        sprites.setDataBoolean(otherSprite, "go not to player", true)
        pause(1000)
        sprites.setDataBoolean(otherSprite, "go to player", true)
        sprites.setDataBoolean(otherSprite, "go not to player", false)
    }
    sprite.destroy()
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile33, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.darkGroundCenter)
    list.push(img`
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . f f f f f . . . . . . 
        . . . . . f 1 f 1 f . . . . . . 
        . . . . . f 1 f 1 f . . . . . . 
        . . . . f f f f f f f . . . . . 
        . . . . . f f f f f . . . . . . 
        . . . . . . f . f . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        . . . . . . . . . . . . . . . . 
        `)
})
scene.onOverlapTile(SpriteKind.Player, myTiles.tile32, function (sprite, location) {
    tiles.setTileAt(location, sprites.dungeon.darkGroundCenter)
    list.push(img`
        . . . . . 4 4 . 4 4 . . . . . . 
        . . . . . 4 4 4 4 4 . . . . . . 
        . . . . . e f 4 f e . . . . . . 
        . . . . . 4 f 4 f 4 . . . . . . 
        . . . . . e 4 4 4 e . . . . . . 
        . . . . . . 4 4 4 . . . . . . . 
        . . . 4 4 4 4 4 4 4 4 4 . . . . 
        . . . e e 4 1 1 1 4 e e . . . . 
        . . . 4 4 4 1 1 1 4 4 4 . . . . 
        . . . e e 4 1 1 1 4 e e . . . . 
        . . . 4 4 4 1 1 1 4 4 4 . . . . 
        . . . 4 4 4 4 4 4 4 4 4 . . . . 
        . . . . . e e . e e . . . . . . 
        . . . . . 4 4 . 4 4 . . . . . . 
        . . . . . e e . e e . . . . . . 
        . . . . . 4 4 . 4 4 . . . . . . 
        `)
})
sprites.onOverlap(SpriteKind.Player, SpriteKind.Enemy, function (sprite, otherSprite) {
    if (sprites.readDataBoolean(otherSprite, "mally attack")) {
        music.powerDown.play()
        info.changeLifeBy(-1)
        pause(2000)
    }
})
let list_of_wood: Image[] = []
let wood = 0
let statusbar: StatusBarSprite = null
let mySprite3: Sprite = null
let projectile: Sprite = null
let moser = 0
let x = 0
let item: Image = null
let X_Y: CollisionDirection = null
let mySprite2: Sprite = null
let lokashon2: tiles.Location = null
let location: tiles.Location = null
let item1: Image = null
let skin = 0
let mi = false
let minuyw: Sprite = null
let mySprite: Sprite = null
let list: Image[] = []
effects.clouds.startScreenEffect()
list = [img`
    . . . . . . . . . . . . . . . . 
    . . . . . e e e e e . . . . . . 
    . . . . . 4 e e 4 e . . . . . . 
    . . . . . 4 f 4 f 4 . . . . . . 
    . . . . . 4 f 4 f 4 . . . . . . 
    . . . . . . 4 4 4 . . . . . . . 
    . . . 2 2 2 2 2 2 2 2 2 . . . . 
    . . . 2 2 2 2 2 2 2 2 2 . . . . 
    . . . 2 2 2 2 2 2 2 2 2 . . . . 
    . . . 2 2 2 2 2 2 2 2 2 . . . . 
    . . . 4 4 2 2 2 2 2 4 4 . . . . 
    . . . 4 4 6 6 6 6 6 4 4 . . . . 
    . . . . . 6 6 . 6 6 . . . . . . 
    . . . . . 6 6 . 6 6 . . . . . . 
    . . . . . 6 6 . 6 6 . . . . . . 
    . . . . . 4 4 . 4 4 . . . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . 5 5 5 5 5 5 . . . . . 
    . . . . . 4 5 5 5 5 5 . . . . . 
    . . . . . 4 f 4 f 4 5 . . . . . 
    . . . . . 4 f 4 f 4 5 . . . . . 
    . . . . . . 4 4 4 5 5 . . . . . 
    . . . 3 3 3 3 3 3 5 5 3 . . . . 
    . . . 3 3 3 3 3 3 5 3 3 . . . . 
    . . . 3 3 3 3 3 3 3 3 3 . . . . 
    . . . 3 3 3 3 3 3 3 3 3 . . . . 
    . . . 4 4 3 3 3 3 3 4 4 . . . . 
    . . . 4 4 a a a a a 4 4 . . . . 
    . . . . . a a . a a . . . . . . 
    . . . . . a a . a a . . . . . . 
    . . . . . a a . a a . . . . . . 
    . . . . . 4 4 . 4 4 . . . . . . 
    `, img`
    . . . . . 7 . . . 7 . . . . . . 
    . . . . . 7 7 7 7 7 . . . . . . 
    . . . . . 7 e 7 e 7 . . . . . . 
    . . . . . 7 e 7 e 7 . . . . . . 
    . . . . . 7 7 7 7 7 . . . . . . 
    . . . . . . 7 7 7 . . . . . . . 
    . . . e e e e e e e e e . . . . 
    . . . 7 7 e e e e e 7 7 . . . . 
    . . . 7 7 e e e e e 7 7 . . . . 
    . . . 7 7 e e e e e 7 7 . . . . 
    . . . 7 7 e e e e e 7 7 . . . . 
    . . . 7 7 e e e e e 7 7 . . . . 
    . . . . . e e . e e . . . . . . 
    . . . . . 7 7 . 7 7 . . . . . . 
    . . . . . 7 7 . 7 7 . . . . . . 
    . . . . . e e . e e . . . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . 7 7 7 7 7 . . . . . . 
    . . . . . 6 7 7 6 7 . . . . . . 
    . . . . . 6 f 6 f 6 . . . . . . 
    . . . . . 6 f 6 f 6 . . . . . . 
    . . . . . . 6 6 6 . . . . . . . 
    . . . a a a a a a a a 6 . . . . 
    . . . a 6 a a a 6 a a a . . . . 
    . . . a a a a a a a 6 a . . . . 
    . . . a a a 6 a a a a 6 . . . . 
    . . . 6 6 a a a a a 6 6 . . . . 
    . . . 6 6 2 2 2 2 2 6 6 . . . . 
    . . . . . 2 6 . 2 2 . . . . . . 
    . . . . . 2 2 . 2 6 . . . . . . 
    . . . . . 6 2 . 2 2 . . . . . . 
    . . . . . 6 6 . 6 6 . . . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . 5 5 5 5 5 . . . . . . 
    . . . . . 4 5 5 4 5 . . . . . . 
    . . . . . 4 f 4 f 4 . . . . . . 
    . . . . . 4 f 4 f 4 . . . . . . 
    . . . . . . 4 4 4 . . . . . . . 
    . . . 6 6 6 6 6 6 6 6 6 . . . . 
    . . . 6 6 6 6 6 6 6 6 6 . . . . 
    . . . 6 6 6 6 6 6 6 6 6 . . . . 
    . . . 6 6 6 6 6 6 6 6 6 . . . . 
    . . . 4 4 6 6 6 6 6 4 4 . . . . 
    . . . 4 4 c c c c c 4 4 . . . . 
    . . . . . c c . c c . . . . . . 
    . . . . . c c . c c . . . . . . 
    . . . . . c c . c c . . . . . . 
    . . . . . 4 4 . 4 4 . . . . . . 
    `]
mySprite = sprites.create(list[0], SpriteKind.Player)
controller.moveSprite(mySprite, 100, 0)
tiles.loadMap(tiles.createMap(tiles.createTilemap(hex``, img`
    .....................................................2....2.22222...............
    ....................................................222..2222...2...............
    ............................................................2...2...............
    ................................................................2...............
    .................................................2222222222222222...............
    ................................................2..222222222....................
    ................................2.............222...............................
    ........................2......222...........2222...............................
    ......222..............222.....222................2222222222..2.222222..........
    .....22222.............222........................222222222222.2222222222222222.
    ....2222222.......................................222222222222222222222222222222
    ..................................................2222222222222.2222222222222222
    ................222222222222222222222.........2222222222222222.22222222222222222
    ................2222222222222222222222222222222222222222222222222222222222222222
    222222222222222222222222222222222222222222222222222222222222222.2222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222.22222222222222222
    222222222222222222222222222222222222222222222222222222222222222.2222222222222222
    22222222222222222222222222222222222222222222222222222222222222.22222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    22222222222222222222222222222222222222222222222222222222222222..2222222222222222
    2222222222222222222222222222222222222222222222222222222................222222222
    2222222222222222222222222222222222222222222222222222222................2...22222
    2222222222222222222222222222222222222222222222222222222..22222..222222.......222
    2222222222222222222222222222....222222222222222222.......22222..222222........22
    2222222222222222222222222222....222222222222222222.......22222..2222222222222222
    2222222222222222222222222222....222222222222222222..2222222222.22222222222222222
    2222222222222222222222222222....222222222222222222..2..............2222222222222
    2222222222222222222222222222....222222222222222222...........................222
    22222222222222222222222222222222222222222222222222.....22222...222...........222
    22222222222222222222222222222222222222222222222222222..22222.....2222222.....222
    22222222222222222222222222222222222222222222222222222..22222.2..22222222222..222
    22222222222222222222222222222222222222222222222222222..222222....2222222222..222
    22222222222222222222222222222222222222222222222222222..2.........22.....222..222
    2.................22222222222222222222222222222222222..2........222..........222
    2.................22222222222222222222222222222222222..222222222222..........222
    2.................22222222222222222222222222222222222..222222222222222.......222
    2.................22222222222222222222....22222222222......222222222222222....22
    2.................22222222222222222222....22222222222............222222222....22
    2.................22222222222222222222....2222222222222222.........22222222....2
    2.................22222222222222222222....2222222222222222............22222....2
    2.................22222222222222222222....22222222222222222222.........22222....
    2.................222222222222222222222222222222222222222222222222222...2222....
    2.................2222222222222222222222222222222222222222222222222222...2222...
    2.................2222222222222222222222222222222222.....22222222222222...222...
    2.................22222.....222222222222222222222222.......2222222222222...22...
    2.................22222.....222222222222222222222222..........2222222222...22...
    2.................22222.....222.......22222222222222...............22222...2....
    2.................22222.....2.............2222222222..22..............22..22....
    2.................22222.....2.............2222222222..22222..............22.....
    2222222222222222222222222222222........2222222222222..22222222222.......22.....2
    ................................222....................222222222222222222......2
    .................................................................22222222....222
    ....................................222..........................22222222....222
    .................................................................22222222...2222
    .......................................222.......................22222222...2222
    ...........................................................................22222
    ......2.....2...2..................22...........................................
    .....222...222.222....................22........................................
    .........................................22............2222.....................
    .................................................22222222222....................
    ..........................................2222222222222222222...................
    22222222222222222222................222222222222222222222222222.................
    2222222222222222222222222222222222222222222222222222222222222222................
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    22222222222222222222222222222222222222222222222222222222222222222222222222222222
    `, [myTiles.transparency16,myTiles.tile1,myTiles.tile2,myTiles.tile3,myTiles.tile4,myTiles.tile5,myTiles.tile6,myTiles.tile7,myTiles.tile8,myTiles.tile9,myTiles.tile10,myTiles.tile11,myTiles.tile12,myTiles.tile13,myTiles.tile14,myTiles.tile15,myTiles.tile16,myTiles.tile17,myTiles.tile18,myTiles.tile19,myTiles.tile20,myTiles.tile21,sprites.dungeon.darkGroundCenter,sprites.dungeon.darkGroundWest,sprites.dungeon.darkGroundSouthWest0,sprites.dungeon.darkGroundSouth,sprites.dungeon.darkGroundSouthEast0,sprites.dungeon.darkGroundEast,sprites.dungeon.darkGroundNorth,sprites.dungeon.darkGroundNorthEast0,sprites.dungeon.darkGroundNorthWest0,sprites.dungeon.collectibleInsignia,myTiles.tile22,sprites.dungeon.floorDark2,sprites.dungeon.floorLight2,sprites.builtin.brick,myTiles.tile24,myTiles.tile25,myTiles.tile26,myTiles.tile27,sprites.dungeon.floorDarkDiamond,myTiles.tile28,myTiles.tile29,myTiles.tile30,myTiles.tile31,myTiles.tile32,myTiles.tile33,myTiles.tile34,myTiles.tile35,myTiles.tile36,sprites.dungeon.collectibleBlueCrystal,myTiles.tile37,myTiles.tile38], TileScale.Sixteen)))
mySprite.ay = 200
scene.cameraFollowSprite(mySprite)
scene.setBackgroundColor(8)
tiles.placeOnRandomTile(mySprite, myTiles.tile3)
minuyw = sprites.create(img`
    . . b b b b . . 
    . b b b b b b . 
    b b b b b b b b 
    b b b b b b b b 
    b b b b b b b b 
    d b b b b b b d 
    . d b b b b d . 
    . . d d d d . . 
    `, SpriteKind.Player)
tiles.placeOnRandomTile(minuyw, myTiles.tile14)
mi = true
skin = 0
item1 = myTiles.tile14
tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom), img`
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 5 5 5 1 1 1 1 1 1 1 
    1 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    `)
location = tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom)
tiles.placeOnRandomTile(minuyw, myTiles.tile18)
tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom), img`
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 5 5 5 1 1 1 1 1 1 1 
    1 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
    `)
lokashon2 = tiles.locationInDirection(tiles.locationOfSprite(minuyw), CollisionDirection.Bottom)
sprites.setDataNumber(mySprite, "dert", 0)
sprites.setDataNumber(mySprite, "stoan", 0)
sprites.setDataNumber(mySprite, "gold", 0)
sprites.setDataSprite(mySprite, "golld", sprites.create(img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    `, SpriteKind.Player))
for (let index = 0; index < randint(100, 200); index++) {
    tiles.placeOnRandomTile(sprites.readDataSprite(mySprite, "golld"), myTiles.tile22)
    tiles.setTileAt(tiles.locationOfSprite(sprites.readDataSprite(mySprite, "golld")), myTiles.tile23)
}
let list2 = [img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . 4 . 4 . . . . . . . . . . . 
    . . 4 4 4 . . . . . . . . . . . 
    . 4 f 1 4 . . . . . . . . . . . 
    . 4 f 1 4 . . . . . . . . . . . 
    . . 4 4 . . . . . . . . . . . . 
    . . 4 4 4 e 4 e 4 e 4 e 4 e 4 . 
    . . 4 4 4 e 4 e 4 e 4 e . . . . 
    . . 4 4 4 4 4 4 4 4 4 4 . . . . 
    . . 4 . . 4 . . 4 . . 4 . . . . 
    . 4 4 . . 4 . 4 4 . . 4 . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . 1 . . . . . . . . 
    . . . . . . 1 f . . . . . . . . 
    . . . . f 1 1 1 . . . . . . . . 
    . . . . 1 8 9 1 . . . . f . . . 
    . . . . 1 8 9 1 . . . . 1 . . . 
    . . . . 1 1 1 1 . . f 1 f . . . 
    . . . . . 1 f . . . 1 . . . . . 
    . . . . . 1 1 1 f 1 f . . . . . 
    . . . . 1 f 1 1 1 1 . . . . . . 
    . . . . . 1 . . . 1 . . . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . 9 . . . . . 9 . . . . . . 
    . . . 9 9 . . . 9 9 . . 9 9 . . 
    . . . 9 9 9 9 9 9 9 . . . 9 . . 
    . . . 9 1 f 9 f 1 9 . . 9 9 . . 
    . . . 9 1 f 9 f 1 9 . . 9 9 . . 
    . . . 9 9 9 9 9 9 9 . . 9 . . . 
    . . . . e f f e e . . . 9 9 . . 
    . . . 9 e e f e e 9 . . 9 9 . . 
    . . . . e e f f e . . . 9 9 . . 
    . . . . e e f f e . 9 9 9 9 . . 
    . . . . e e e e e 9 9 9 . . . . 
    . . . . 9 . . . 9 . . . . . . . 
    `, img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . c . . c . . . . . . 
    . . . . . c c . c c . . . . . . 
    . . . . . c c c c c . . . . . . 
    . . . . . c f c f c . . . . . . 
    . . . . . c f c f c . . . . . . 
    . . . . . c c c c c . . . . . . 
    . . . . c 2 2 2 2 2 c . . . . . 
    . . . . . 2 f f f 2 . . . . . . 
    . . . . . 2 f f f 2 . . . . . . 
    . . . . . 2 f f f 2 . . . . . . 
    . . . . . 2 2 2 2 2 . . . . . . 
    . . . . . . c . . c . . . . . . 
    `]
let cat112 = 0
for (let index = 0; index < 4; index++) {
    for (let index = 0; index < randint(1, 2); index++) {
        while (!(tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(sprites.readDataSprite(mySprite, "golld")), CollisionDirection.Bottom), myTiles.tile1))) {
            tiles.placeOnRandomTile(sprites.readDataSprite(mySprite, "golld"), myTiles.transparency16)
        }
        mySprite2 = sprites.create(list2[cat112], SpriteKind.pet)
        sprites.setDataNumber(mySprite2, "image", cat112)
        mySprite2.x = sprites.readDataSprite(mySprite, "golld").x
        mySprite2.y = sprites.readDataSprite(mySprite, "golld").y
        mySprite2.ay = 200
        if (Math.percentChance(50)) {
            sprites.setDataNumber(mySprite2, "x", 1)
            mySprite2.setImage(list2[cat112])
            mySprite2.image.flipX()
        } else {
            sprites.setDataNumber(mySprite2, "x", -1)
            mySprite2.setImage(list2[cat112])
        }
        tiles.placeOnRandomTile(sprites.readDataSprite(mySprite, "golld"), myTiles.transparency16)
    }
    cat112 = cat112 + 1
}
sprites.setDataSprite(mySprite, "scin", sprites.create(img`
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    . . . . . . . . . . . . . . . . 
    `, SpriteKind.Player))
tiles.placeOnTile(sprites.readDataSprite(mySprite, "scin"), tiles.getTileLocation(15, 43))
info.setLife(15)
game.onUpdateInterval(1000, function () {
    for (let value of sprites.allOfKind(SpriteKind.Enemy)) {
        if (sprites.readDataBoolean(value, "soot ero")) {
            if (mySprite.x > value.x) {
                projectile = sprites.createProjectileFromSprite(img`
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . 1 1 e e e e e b b . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    `, value, sprites.readDataNumber(value, "ero speed"), 0)
            } else {
                projectile = sprites.createProjectileFromSprite(img`
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . b . . . . . . 1 1 . . . 
                    . . . b b e e e e e 1 1 . . . . 
                    . . . . b . . . . . . 1 1 . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    `, value, sprites.readDataNumber(value, "ero speed") * -1, 0)
            }
        }
    }
})
forever(function () {
    if (moser >= 1) {
        for (let index = 0; index < moser; index++) {
            for (let value of tiles.getTilesByType(sprites.dungeon.collectibleInsignia)) {
                if (Math.percentChance(50)) {
                    mySprite3 = sprites.create(img`
                        . . . . b b b b b b b . . . . . 
                        . . . . 1 1 1 b 1 1 1 . . . . . 
                        . . . . 1 f 1 1 1 f 1 . . . . . 
                        . . . . 1 f f 1 f f 1 . . . . . 
                        . . . . 1 1 1 1 1 1 1 . . . . . 
                        . . . . . . 1 1 1 . . . . . . . 
                        . . . . . e b e e e . . . . . . 
                        . . . . 1 . b b e . 1 . . . . . 
                        . . . . 1 . e b b . 1 . . . . . 
                        . b b e 1 . e e e . 1 . . . . . 
                        . . . . . . e e e . . . . . . . 
                        . . . . . . e . e . . . . . . . 
                        . . . . . . 1 . 1 . . . . . . . 
                        . . . . . e e . e e . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `, SpriteKind.Enemy)
                    sprites.setDataBoolean(mySprite3, "mally attack", true)
                    sprites.setDataBoolean(mySprite3, "soot ero", false)
                    sprites.setDataBoolean(mySprite3, "go to player", true)
                    sprites.setDataBoolean(mySprite3, "soot fire", false)
                    sprites.setDataBoolean(mySprite3, "go not to player", false)
                    sprites.setDataNumber(mySprite3, "speed", 50)
                    sprites.setDataNumber(mySprite3, "ero speed", 100)
                    sprites.setDataNumber(mySprite3, "fire speed", 100)
                    sprites.setDataNumber(mySprite3, "Jump", 3)
                    mySprite3.ay = 200
                    tiles.placeOnTile(mySprite3, value)
                    statusbar = statusbars.create(20, 2, StatusBarKind.EnemyHealth)
                    statusbar.setColor(2, 11, 4)
                    statusbar.attachToSprite(mySprite3)
                    statusbar.max = 20
                    statusbar.value = 20
                } else {
                    mySprite3 = sprites.create(img`
                        . . . . b b b b b b b . . . . . 
                        . . . . 1 1 1 b 1 1 1 . . . . . 
                        . . . . 1 f 1 1 1 f 1 . . . . . 
                        . . . . 1 f f 1 f f 1 . . . . . 
                        . . . . 1 1 1 1 1 1 1 . . . . . 
                        . . . . . . 1 1 1 . . . . . . . 
                        . . . . . e b e e e . . . . . . 
                        . . . e 1 . b b e . 1 . . . . . 
                        . . e . 1 . e b b . 1 . . . . . 
                        . . e . 1 . e e e . 1 . . . . . 
                        . . e . 1 . e e e . 1 . . . . . 
                        . . . e . . e . e . . . . . . . 
                        . . . . . . 1 . 1 . . . . . . . 
                        . . . . . e e . e e . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `, SpriteKind.Enemy)
                    sprites.setDataBoolean(mySprite3, "mally attack", false)
                    sprites.setDataBoolean(mySprite3, "soot ero", true)
                    sprites.setDataBoolean(mySprite3, "go to player", true)
                    sprites.setDataBoolean(mySprite3, "soot fire", false)
                    sprites.setDataBoolean(mySprite3, "go not to player", false)
                    sprites.setDataNumber(mySprite3, "speed", 10)
                    sprites.setDataNumber(mySprite3, "ero speed", 100)
                    sprites.setDataNumber(mySprite3, "fire speed", 100)
                    sprites.setDataNumber(mySprite3, "Jump", 3)
                    mySprite3.ay = 200
                    tiles.placeOnTile(mySprite3, value)
                    statusbar = statusbars.create(20, 2, StatusBarKind.EnemyHealth)
                    statusbar.setColor(2, 11, 4)
                    statusbar.attachToSprite(mySprite3)
                    statusbar.max = 5
                    statusbar.value = 5
                }
            }
        }
        moser = 0
    }
})
forever(function () {
    if (mi) {
        if (item == myTiles.tile18) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile18)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile19) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile19)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile12) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile12)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile13) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile13)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile26) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile26)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile27) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "dert") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile27)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        sprites.changeDataNumberBy(mySprite, "dert", -1)
                    }
                }
            }
        } else if (item == sprites.dungeon.floorDark2) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "stoan") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), sprites.dungeon.floorDark2)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        sprites.changeDataNumberBy(mySprite, "stoan", -1)
                    }
                }
            }
        } else if (item == sprites.dungeon.floorLight2) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "stoan") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), sprites.dungeon.floorLight2)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        sprites.changeDataNumberBy(mySprite, "stoan", -1)
                    }
                }
            }
        } else if (item == sprites.builtin.brick) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "stoan") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), sprites.builtin.brick)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        sprites.changeDataNumberBy(mySprite, "stoan", -1)
                    }
                }
            }
        } else if (item == myTiles.tile24) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "gold") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile24)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        sprites.changeDataNumberBy(mySprite, "gold", -1)
                    }
                }
            }
        } else if (item == myTiles.tile25) {
            if (controller.B.isPressed()) {
                if (sprites.readDataNumber(mySprite, "gold") >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile25)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        sprites.changeDataNumberBy(mySprite, "gold", -1)
                    }
                }
            }
        } else if (item == myTiles.tile30) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile30)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), true)
                        wood += -1
                    }
                }
            }
        } else if (item == myTiles.tile31) {
            if (controller.B.isPressed()) {
                if (wood >= 1) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)) {
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile31)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        wood += -1
                    }
                }
            }
        }
    }
})
forever(function () {
    if (mi) {
        if (item1 == myTiles.tile14) {
            if (controller.A.isPressed()) {
                list_of_wood = [
                myTiles.tile4,
                myTiles.tile5,
                myTiles.tile6,
                myTiles.tile8,
                myTiles.tile7,
                myTiles.tile18,
                myTiles.tile19,
                myTiles.tile12,
                myTiles.tile13,
                myTiles.tile26,
                myTiles.tile3,
                myTiles.tile30,
                myTiles.tile31
                ]
                for (let index = 0; index < 13; index++) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), list_of_wood[0])) {
                        controller.moveSprite(mySprite, 0, 0)
                        mySprite.startEffect(effects.spray, 200)
                        pause(200)
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        wood += 1
                    }
                    list_of_wood.shift()
                }
            }
        } else if (item1 == myTiles.tile17) {
            if (controller.A.isPressed()) {
                list_of_wood = [myTiles.tile1, myTiles.tile2, myTiles.tile27]
                for (let index = 0; index < 3; index++) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), list_of_wood[0])) {
                        controller.moveSprite(mySprite, 0, 0)
                        mySprite.startEffect(effects.spray, 200)
                        pause(200)
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        sprites.changeDataNumberBy(mySprite, "dert", 1)
                    }
                    list_of_wood.shift()
                }
            }
        } else if (item1 == myTiles.tile16) {
            if (controller.A.isPressed()) {
                list_of_wood = [sprites.dungeon.floorLight2, sprites.dungeon.floorDark2, myTiles.tile22, sprites.dungeon.floorLight2, sprites.builtin.brick]
                for (let index = 0; index < 5; index++) {
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), list_of_wood[0])) {
                        controller.moveSprite(mySprite, 0, 0)
                        mySprite.startEffect(effects.spray, 200)
                        pause(200)
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        sprites.changeDataNumberBy(mySprite, "stoan", 1)
                    }
                    if (tiles.tileIs(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.tile23)) {
                        controller.moveSprite(mySprite, 0, 0)
                        mySprite.startEffect(effects.warmRadial, 500)
                        pause(500)
                        controller.moveSprite(mySprite, 100, 0)
                        tiles.setTileAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), myTiles.transparency16)
                        tiles.setWallAt(tiles.locationInDirection(tiles.locationOfSprite(mySprite), X_Y), false)
                        sprites.changeDataNumberBy(mySprite, "gold", 1)
                    }
                    list_of_wood.shift()
                }
            }
        } else if (item1 == myTiles.tile35) {
            if (controller.A.isPressed()) {
                if (mySprite.isHittingTile(CollisionDirection.Bottom)) {
                    sprites.setDataSprite(mySprite, "sord", sprites.create(img`
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . b . . . . . . . . . . 
                        b b b b b b e e . . . . . . . . 
                        . . . . . b . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `, SpriteKind.sords))
                    if (x == 1) {
                        sprites.readDataSprite(mySprite, "sord").setImage(img`
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . b . . . . . . 
                            . . . . . . . e e b b b b b b b 
                            . . . . . . . . . b . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            . . . . . . . . . . . . . . . . 
                            `)
                    }
                    sprites.readDataSprite(mySprite, "sord").x = mySprite.x
                    sprites.readDataSprite(mySprite, "sord").y = mySprite.y
                    sprites.readDataSprite(mySprite, "sord").x += x
                    sprites.readDataSprite(mySprite, "sord").x += x
                    controller.moveSprite(mySprite, 0, 0)
                    pause(200)
                    sprites.readDataSprite(mySprite, "sord").x += x
                    sprites.readDataSprite(mySprite, "sord").x += x
                    pause(200)
                    controller.moveSprite(mySprite, 100, 0)
                    sprites.readDataSprite(mySprite, "sord").destroy()
                    pause(500)
                }
            }
        } else if (item1 == myTiles.tile36) {
            if (controller.A.isPressed()) {
                sprites.setDataSprite(mySprite, "bew", sprites.create(img`
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . 1 1 e e e e e b b . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    `, SpriteKind.ero))
                sprites.setDataBoolean(sprites.readDataSprite(mySprite, "bew"), "boom", false)
                if (x == -1) {
                    sprites.readDataSprite(mySprite, "bew").setImage(img`
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . b . . . . . . 1 1 . . . 
                        . . . b b e e e e e 1 1 . . . . 
                        . . . . b . . . . . . 1 1 . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `)
                }
                sprites.readDataSprite(mySprite, "bew").x = mySprite.x
                sprites.readDataSprite(mySprite, "bew").y = mySprite.y
                sprites.readDataSprite(mySprite, "bew").ax += x * 10 * 5
                pause(200)
            }
        } else if (item1 == myTiles.tile37) {
            if (controller.A.isPressed()) {
                sprites.setDataSprite(mySprite, "bew", sprites.create(img`
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . 1 1 e e e e e b b . . . . 
                    . . 1 1 . . . . . . b . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    . . . . . . . . . . . . . . . . 
                    `, SpriteKind.ero))
                sprites.setDataBoolean(sprites.readDataSprite(mySprite, "bew"), "boom", true)
                if (x == -1) {
                    sprites.readDataSprite(mySprite, "bew").setImage(img`
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . b . . . . . . 1 1 . . . 
                        . . . b b e e e e e 1 1 . . . . 
                        . . . . b . . . . . . 1 1 . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `)
                }
                sprites.readDataSprite(mySprite, "bew").x = mySprite.x
                sprites.readDataSprite(mySprite, "bew").y = mySprite.y
                sprites.readDataSprite(mySprite, "bew").fx += x
                sprites.readDataSprite(mySprite, "bew").vx += x * 10 * 5
                pause(500)
            }
        }
    }
})
forever(function () {
    sprites.readDataSprite(mySprite, "scin").setImage(mySprite.image)
})
forever(function () {
    for (let value of sprites.allOfKind(SpriteKind.ero2)) {
        sprites.setDataSprite(mySprite, "bew", sprites.create(img`
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . 1 1 e e e e e b b . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            `, SpriteKind.ero))
        sprites.setDataBoolean(sprites.readDataSprite(mySprite, "bew"), "boom", false)
        sprites.readDataSprite(mySprite, "bew").setImage(img`
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . 1 1 e e e e e b b . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            `)
        sprites.readDataSprite(mySprite, "bew").x = value.x
        sprites.readDataSprite(mySprite, "bew").y = value.y
        sprites.readDataSprite(mySprite, "bew").ax += 50
        sprites.setDataSprite(mySprite, "bew", sprites.create(img`
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . 1 1 e e e e e b b . . . . 
            . . 1 1 . . . . . . b . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            `, SpriteKind.ero))
        sprites.setDataBoolean(sprites.readDataSprite(mySprite, "bew"), "boom", false)
        sprites.readDataSprite(mySprite, "bew").setImage(img`
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . b . . . . . . 1 1 . . . 
            . . . b b e e e e e 1 1 . . . . 
            . . . . b . . . . . . 1 1 . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            . . . . . . . . . . . . . . . . 
            `)
        sprites.readDataSprite(mySprite, "bew").x = value.x
        sprites.readDataSprite(mySprite, "bew").y = value.y
        sprites.readDataSprite(mySprite, "bew").ax += -50
    }
    pause(200)
})
forever(function () {
    for (let index = 0; index < 300; index++) {
        for (let value of sprites.allOfKind(SpriteKind.pet)) {
            if (Math.percentChance(70)) {
                value.x += sprites.readDataNumber(value, "x")
            } else if (Math.percentChance(80)) {
                pause(1)
            } else {
                if (Math.percentChance(50)) {
                    sprites.setDataNumber(value, "x", 1)
                    value.setImage(list2[sprites.readDataNumber(value, "image")])
                    value.image.flipX()
                } else {
                    sprites.setDataNumber(value, "x", -1)
                    value.setImage(list2[sprites.readDataNumber(value, "image")])
                }
            }
            if ((value.isHittingTile(CollisionDirection.Right) || value.isHittingTile(CollisionDirection.Left)) && value.isHittingTile(CollisionDirection.Bottom)) {
                if (!(tiles.tileIs(location, myTiles.tile30)) && !(tiles.tileIsWall(tiles.locationInDirection(tiles.locationOfSprite(mySprite), CollisionDirection.Top)))) {
                    for (let index = 0; index < 17; index++) {
                        value.y += -1
                    }
                }
            }
            pause(10)
        }
    }
    pause(1000)
})
forever(function () {
    for (let value of sprites.allOfKind(SpriteKind.Enemy)) {
        if (sprites.readDataBoolean(value, "go to player")) {
            if (mySprite.x > value.x) {
                value.ax = sprites.readDataNumber(value, "speed")
            } else {
                value.ax = sprites.readDataNumber(value, "speed") * -1
            }
        }
        if (sprites.readDataBoolean(value, "go not to player")) {
            if (mySprite.x < value.x) {
                value.ax = sprites.readDataNumber(value, "speed")
            } else {
                value.ax = sprites.readDataNumber(value, "speed") * -1
            }
        }
        if (value.isHittingTile(CollisionDirection.Bottom) && (value.isHittingTile(CollisionDirection.Right) || value.isHittingTile(CollisionDirection.Left))) {
            for (let index = 0; index < sprites.readDataNumber(value, "Jump"); index++) {
                for (let index = 0; index < 17; index++) {
                    value.y += -1
                }
            }
        }
    }
})
forever(function () {
    for (let value of sprites.allOfKind(SpriteKind.Enemy)) {
        if (sprites.readDataBoolean(value, "soot fire")) {
            if (mySprite.x > value.x) {
                for (let index = 0; index < 4; index++) {
                    projectile = sprites.createProjectileFromSprite(img`
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . 2 2 2 2 2 2 2 . . . . . 
                        . . . 2 4 4 4 4 4 4 4 2 . . . . 
                        . . 2 4 4 4 4 4 4 4 4 4 2 . . . 
                        . . 2 4 4 4 5 5 5 4 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 4 5 5 5 4 4 4 2 . . . 
                        . . 2 4 4 4 4 4 4 4 4 4 2 . . . 
                        . . . 2 4 4 4 4 4 4 4 2 . . . . 
                        . . . . 2 2 2 2 2 2 2 . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `, value, sprites.readDataNumber(value, "fire speed"), 0)
                    pause(100)
                    music.pewPew.play()
                }
            } else {
                for (let index = 0; index < 4; index++) {
                    projectile = sprites.createProjectileFromSprite(img`
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . 2 2 2 2 2 2 2 . . . . . 
                        . . . 2 4 4 4 4 4 4 4 2 . . . . 
                        . . 2 4 4 4 4 4 4 4 4 4 2 . . . 
                        . . 2 4 4 4 5 5 5 4 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 5 5 5 5 5 4 4 2 . . . 
                        . . 2 4 4 4 5 5 5 4 4 4 2 . . . 
                        . . 2 4 4 4 4 4 4 4 4 4 2 . . . 
                        . . . 2 4 4 4 4 4 4 4 2 . . . . 
                        . . . . 2 2 2 2 2 2 2 . . . . . 
                        . . . . . . . . . . . . . . . . 
                        . . . . . . . . . . . . . . . . 
                        `, value, sprites.readDataNumber(value, "fire speed") * -1, 0)
                    pause(100)
                    music.pewPew.play()
                }
            }
        }
    }
    pause(2000)
})
